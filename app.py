import matplotlib
# Set the Agg backend to prevent the "main thread is not in main loop" error
matplotlib.use('Agg')
import matplotlib.pyplot as plt

from flask import Flask, render_template_string, request, url_for, redirect
import io
import base64
import datetime
import matplotlib.dates as mdates
import time
import pandas as pd
import numpy as np # Import numpy for data manipulation

# --- NEW PLOTLY IMPORTS ---
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import liencompfyer as t1

# Initialize the Flask application
app = Flask(__name__)

# --- Dummy Data for Demonstration ---
DUMMY_DATA_1 = {'candles': [[1760413500, 55.05, 63, 55.05, 61.3, 1986375], [1760413800, 61.1, 64.9, 60.3, 63.5, 798375], [1760414100, 63, 64.65, 60.35, 63.05, 746850], [1760414400, 63, 64.2, 61.2, 61.6, 341850], [1760414700, 61.75, 63.6, 52.75, 53.2, 690525], [1760415000, 53, 59.7, 52.5, 54.75, 879750], [1760415300, 54.75, 56.5, 52.05, 55.95, 802125], [1760415600, 56.05, 56.8, 53.85, 55.05, 346950], [1760415900, 55.5, 55.5, 53.15, 54.2, 393450], [1760416200, 54.2, 56.5, 47.65, 51.2, 999675], [1760416500, 51.25, 52.55, 49.2, 52.35, 504750], [1760416800, 52.35, 54.3, 51.4, 52.6, 391875], [1760417100, 52.55, 53.85, 49.65, 50.25, 493875], [1760417400, 50.4, 51.5, 47.9, 51.45, 489900], [1760417700, 51.5, 53.4, 50.7, 52.35, 415425], [1760418000, 52.4, 53.75, 50.45, 51.85, 302025], [1760418300, 51.9, 52.9, 49.45, 51.4, 255975], [1760418600, 51.45, 53, 49.5, 52.75, 292575], [1760418900, 52.8, 54.7, 50.1, 50.35, 452625], [1760419200, 50.1, 50.9, 48.5, 49.45, 291750], [1760419500, 49, 51.2, 48.45, 49.1, 255450], [1760419800, 49.3, 49.45, 47.1, 48.5, 363300], [1760420100, 48.4, 48.95, 43.7, 45, 558600], [1760420400, 45.05, 46.2, 43.25, 46, 445650], [1760420700, 46, 46, 38.7, 39.25, 732075], [1760421000, 39.4, 40.35, 37.75, 38.25, 534675], [1760421300, 38.2, 38.4, 36.1, 38.35, 891000], [1760421600, 38.2, 38.5, 36.65, 38.1, 542325], [1760421900, 38.4, 39.55, 38.05, 39.55, 285600], [1760422200, 39.55, 39.85, 37.6, 39.5, 450375], [1760422500, 39.3, 39.7, 37.05, 39.1, 189075], [1760422800, 38.85, 39.8, 38.5, 39.65, 171975], [1760423100, 39.7, 40.4, 38.05, 39.7, 284250], [1760423400, 39.75, 40.2, 38.9, 38.95, 182250], [1760423700, 38.9, 39.1, 34.35, 34.7, 430575], [1760424000, 34.7, 35.25, 32.4, 34, 682275], [1760424300, 34, 34.15, 32.95, 33.8, 405825], [1760424600, 33.75, 34.1, 32.7, 33.85, 237975], [1760424900, 33.9, 33.9, 29, 29.15, 571950], [1760425200, 29.05, 30.15, 28.6, 30.05, 922350], [1760425500, 30.15, 30.8, 28.35, 28.7, 359775], [1760425800, 28.7, 29.85, 27.35, 29.7, 735675], [1760426100, 29.7, 30.75, 29.3, 30.45, 547350], [1760426400, 30.35, 30.85, 30, 30.35, 451200], [1760426700, 30.5, 31.25, 29.9, 30.85, 381900], [1760427000, 30.75, 31.35, 29.4, 29.8, 378075], [1760427300, 29.8, 30.6, 27.3, 28.8, 588525], [1760427600, 28.85, 29.65, 27.95, 29, 302775], [1760427900, 29.15, 29.5, 28.55, 29.15, 239550], [1760428200, 29, 30.6, 28.65, 30.25, 203400], [1760428500, 30.3, 31.2, 30, 31.05, 194850], [1760428800, 30.95, 33.3, 30.95, 33.1, 603900], [1760429100, 33.25, 34, 31.4, 32.75, 495375], [1760429400, 32.75, 35.25, 32.35, 33.3, 581700], [1760429700, 33.3, 33.9, 31.4, 32.95, 373350], [1760430000, 33, 33.2, 29.7, 30.05, 449325], [1760430300, 29.95, 31.6, 29.85, 31.3, 405150], [1760430600, 31.35, 32, 29.75, 31.85, 372000], [1760430900, 32.1, 32.95, 31.3, 32.35, 481725], [1760431200, 32.35, 32.45, 29.25, 30.5, 748650], [1760431500, 30.6, 31.15, 28.9, 29.35, 543600], [1760431800, 29.35, 30.9, 27.65, 30.9, 665325], [1760432100, 30.8, 33.15, 30.15, 32.05, 751725], [1760432400, 32.15, 36.65, 32.15, 35, 950475], [1760432700, 35.25, 38.95, 34.7, 37.4, 1572825], [1760433000, 37.45, 38.35, 35.25, 36.2, 644550], [1760433300, 36.4, 37.6, 31.65, 34, 800100], [1760433600, 34.15, 34.75, 33.1, 34.2, 475125], [1760433900, 34.35, 35, 33.05, 34.05, 432600], [1760434200, 34.1, 34.65, 32.1, 32.8, 524100], [1760434500, 32.85, 33.6, 31.65, 31.85, 948825], [1760434800, 31.6, 31.75, 29.15, 30.3, 695325], [1760435100, 30.35, 30.5, 28, 28.45, 1112550], [1760435400, 28.3, 28.9, 27.25, 27.35, 927675], [1760435700, 27.3, 29, 27.3, 28.9, 1289925], [1760499900, 30.6, 45.95, 30.5, 44.6, 8953275], [1760500200, 44.65, 47.3, 40.65, 42.45, 5010075], [1760500500, 42.65, 45.85, 42.05, 44.05, 3930450], [1760500800, 43.95, 47.65, 43.55, 44.05, 3797025], [1760501100, 44.15, 44.55, 34.1, 34.7, 5285700], [1760501400, 34.85, 36.8, 33.4, 35.85, 3364650], [1760501700, 35.6, 38.45, 33.15, 33.75, 3094875], [1760502000, 33.85, 34.8, 31.6, 34.6, 2708025], [1760502300, 34.2, 35.5, 31.95, 32, 2090400], [1760502600, 32.15, 34.5, 31.25, 31.8, 1702125], [1760502900, 31.7, 35.55, 31.5, 34.95, 1477500], [1760503200, 34.85, 38.35, 34.5, 38.1, 3291900], [1760503500, 38, 40.75, 37.9, 38.55, 3901500], [1760503800, 38.6, 48, 37.7, 45.75, 5600775], [1760504100, 45.65, 47.75, 43.7, 45.65, 3077550], [1760504400, 46.35, 51, 45.6, 50.75, 4309500], [1760504700, 50.45, 52.9, 47.55, 49.9, 4267650], [1760505000, 49.85, 51.95, 48.7, 50.15, 2645325], [1760505300, 50.1, 50.45, 45.35, 47, 2393475], [1760505600, 46.85, 58.35, 45.2, 56.35, 4559925], [1760505900, 56.45, 57.7, 51.95, 56.75, 4397025], [1760506200, 56.6, 61.5, 52.2, 53.2, 5257350], [1760506500, 53.25, 53.95, 50.4, 52.05, 2268675], [1760506800, 52.4, 53.2, 50.2, 52.25, 1631100], [1760507100, 52.05, 52.8, 50.4, 50.85, 1342575], [1760507400, 51.1, 55.5, 49.05, 55.5, 2742975], [1760507700, 55.4, 65.3, 54.2, 63.25, 4109550], [1760508000, 63.05, 63.2, 55.6, 56.15, 2728050], [1760508300, 55.95, 57.75, 53.85, 56.55, 1974450], [1760508600, 56.45, 60.55, 55.3, 56.7, 2366100], [1760508900, 56.5, 57.25, 52.2, 54.75, 2054925], [1760509200, 54.7, 56.3, 53.5, 56.05, 1363500], [1760509500, 56.2, 58.95, 54.8, 56.4, 1963500], [1760509800, 56.15, 57.65, 53.55, 53.9, 1347150], [1760510100, 53.85, 57.3, 53.3, 53.75, 1477725], [1760510400, 53.55, 54.5, 51.4, 51.55, 1623450], [1760510700, 51.75, 54.2, 49.45, 50.3, 2018175], [1760511000, 50.5, 50.7, 47.45, 49.35, 2101650], [1760511300, 49.5, 51.85, 46.35, 51.6, 2256150], [1760511600, 51.3, 53.45, 50.6, 53.15, 2081550], [1760511900, 53.2, 53.2, 49.7, 52, 1503000], [1760512200, 52.05, 56.9, 51.4, 56.3, 2413875], [1760512500, 56.2, 57.45, 53.3, 54.75, 2104650], [1760512800, 54.95, 59.6, 54.7, 59.5, 2489250], [1760513100, 59.55, 60.35, 56.5, 59.25, 2692050], [1760513400, 59.6, 61.7, 57.8, 58.6, 2678100], [1760513700, 58.55, 60.6, 57.2, 57.9, 2095425], [1760514000, 58, 59.15, 55.25, 56.75, 1850550], [1760514300, 57.7, 67, 57.05, 63.55, 4585650], [1760514600, 63.6, 69.35, 63.25, 65.2, 4146000], [1760514900, 65.35, 69, 64.45, 64.95, 3331200], [1760515200, 64.85, 71.9, 64.85, 71.25, 2919750], [1760515500, 71.3, 72.25, 65, 65.05, 3219525], [1760515800, 65.2, 66.9, 63.5, 63.8, 2290500], [1760516100, 63.9, 64.7, 58.15, 58.8, 3065325], [1760516400, 58.85, 61.5, 56.95, 57.3, 2300325], [1760516700, 57.25, 58.5, 53.55, 55, 2508075], [1760517000, 54.9, 56.4, 51.05, 51.25, 2527425], [1760517300, 51.2, 55.2, 50.45, 53.1, 3154425], [1760517600, 53, 55.65, 50.15, 52.75, 2591100], [1760517900, 52.7, 54.75, 50.9, 53.6, 1758450], [1760518200, 53.65, 54.7, 51.7, 53.3, 1655700], [1760518500, 53.3, 57.4, 52.8, 55.65, 2292600], [1760518800, 55.65, 57.6, 54.3, 56.5, 2369625], [1760519100, 56.65, 57.1, 52.15, 52.5, 2098650], [1760519400, 52.3, 58.3, 51.7, 55.45, 2367450], [1760519700, 55.85, 56.15, 46.65, 48.25, 3799500], [1760520000, 48.2, 49.7, 45, 47.2, 4454025], [1760520300, 47.1, 48.65, 46.25, 47.7, 2042100], [1760520600, 47.1, 47.2, 43.3, 45.65, 3522000], [1760520900, 45.55, 48.2, 44.9, 47.6, 2725050], [1760521200, 47.85, 53.2, 46.9, 51.9, 3492600], [1760521500, 52, 54.65, 50.5, 53.45, 3851775], [1760521800, 53.5, 54.1, 51.6, 52.8, 2523375], [1760522100, 52.6, 54.95, 52.05, 54.35, 3188400], [1760586300, 60, 85.65, 60, 80.95, 14550000], [1760586600, 79.85, 87.65, 75.8, 79.2, 8115075], [1760586900, 79.15, 85.85, 75.7, 82.5, 6212475], [1760587200, 82.4, 88, 80.6, 82.6, 5967825], [1760587500, 82.8, 86.5, 72.3, 72.7, 5980500], [1760587800, 72.3, 81.3, 72.15, 80.9, 5797650], [1760588100, 81.25, 85.5, 79.6, 82.6, 5461350], [1760588400, 82.6, 88.75, 79.65, 87.2, 5894100], [1760588700, 87.45, 90, 79.8, 81.45, 5827950], [1760589000, 81.5, 87.2, 79, 86.55, 3931800], [1760589300, 86.7, 87, 82.5, 82.95, 2391600], [1760589600, 82.75, 83.3, 76.2, 76.75, 3550575], [1760589900, 76.55, 81.2, 73.95, 80.1, 4843425], [1760590200, 80.25, 84.9, 77.05, 84, 4707900], [1760590500, 83.95, 89.75, 83.65, 87.5, 6431775], [1760590800, 87.4, 93.35, 85.8, 88.6, 5684775], [1760591100, 88.65, 90, 86.95, 89.55, 2615925], [1760591400, 89.7, 92.5, 87.65, 91.35, 3679275], [1760591700, 91.35, 97, 90.45, 94, 6262050], [1760592000, 94.5, 95.3, 88.4, 91.95, 3396150], [1760592300, 91.65, 95.2, 88, 95.1, 3607950], [1760592600, 95.2, 98.95, 91, 92.85, 4889775], [1760592900, 93.15, 94.4, 91, 93.6, 1966125], [1760593200, 93.95, 95.75, 91.4, 91.7, 2002650], [1760593500, 91.6, 93.85, 90.45, 91.95, 1719750], [1760593800, 91.9, 92.9, 86.6, 86.95, 2751750], [1760594100, 87, 91.8, 86.85, 91.2, 2366325], [1760594400, 91.5, 96.1, 85.4, 87, 5004525], [1760594700, 87.3, 90.35, 86.3, 88.95, 1878225], [1760595000, 89.05, 89.9, 83.6, 84.6, 2464125], [1760595300, 84, 85.8, 80.25, 80.35, 2970675], [1760595600, 80.2, 90.25, 80.2, 89.15, 4119525], [1760595900, 89.25, 89.65, 86.05, 87.05, 1932975], [1760596200, 87, 90.2, 86.7, 87.95, 2444475], [1760596500, 88.05, 90, 85.65, 86.7, 1888050], [1760596800, 86.65, 98, 86.5, 97.65, 5151075], [1760597100, 98.25, 103, 95.3, 98.95, 8453025], [1760597400, 98.75, 108.6, 97.4, 107, 7592700], [1760597700, 107.35, 114.2, 106.5, 110.9, 6842250], [1760598000, 111, 119.75, 110.2, 119.75, 7260450], [1760598300, 119.85, 125.45, 114.05, 122.9, 7019325], [1760598600, 123.05, 128.1, 118.6, 119.7, 5529525], [1760598900, 119.2, 121.75, 116.1, 118, 3704850], [1760599200, 118.55, 131.55, 116.85, 128.65, 5332950], [1760599500, 128.5, 130.2, 121.1, 121.35, 3703425], [1760599800, 121.3, 129, 120.9, 125.45, 3237225], [1760600100, 125.05, 127.3, 119.3, 120.45, 2546550], [1760600400, 120.55, 135.95, 120.55, 133.45, 4553025], [1760600700, 133.35, 135.2, 123.15, 124.95, 3755775], [1760601000, 124.6, 129.5, 122.8, 124.45, 2463000], [1760601300, 124.7, 137.6, 124.5, 128.95, 3846525], [1760601600, 129.7, 135.65, 125.9, 135, 2658600], [1760601900, 135.3, 139.75, 130.85, 134.8, 3081375], [1760602200, 134.75, 143.75, 131.2, 141.3, 4117425], [1760602500, 141.2, 148, 140.1, 142.65, 3708150], [1760602800, 142.75, 144, 137.75, 139.8, 1998375], [1760603100, 139.75, 141.85, 135.85, 139.85, 1740450], [1760603400, 140, 147.4, 140, 147.05, 3216450], [1760603700, 147.2, 169.7, 144.05, 166.75, 5441175], [1760604000, 166.35, 172.95, 160.55, 163.8, 3063150], [1760604300, 163.95, 165.85, 152.6, 156.6, 2409900], [1760604600, 156.35, 170.55, 156.05, 169.95, 2498475], [1760604900, 166.8, 169.6, 161.9, 164.95, 2095425], [1760605200, 165.05, 174.9, 161, 170.55, 2158800], [1760605500, 170.65, 193.9, 170.25, 180.75, 3745725], [1760605800, 179.5, 188.35, 179.5, 186.25, 1626150], [1760606100, 186.1, 190, 173.6, 177.25, 2332125], [1760606400, 176.05, 184, 169.95, 180.3, 2123700], [1760606700, 180.35, 188.55, 176.8, 185.95, 1681125], [1760607000, 185.4, 189.9, 167.1, 169.05, 2172225], [1760607300, 168.5, 168.5, 155.55, 159, 2024100], [1760607600, 158.8, 164.55, 152.75, 155.3, 2008575], [1760607900, 154.65, 162.9, 154.35, 158.1, 1339875], [1760608200, 158, 161.45, 155.3, 158.5, 1308750], [1760608500, 158.4, 159.65, 155.55, 156.75, 1483875], [1760586300, 60, 85.65, 60, 80.95, 14550000], [1760586600, 79.85, 87.65, 75.8, 79.2, 8115075], [1760586900, 79.15, 85.85, 75.7, 82.5, 6212475], [1760587200, 82.4, 88, 80.6, 82.6, 5967825], [1760587500, 82.8, 86.5, 72.3, 72.7, 5980500], [1760587800, 72.3, 81.3, 72.15, 80.9, 5797650], [1760588100, 81.25, 85.5, 79.6, 82.6, 5461350], [1760588400, 82.6, 88.75, 79.65, 87.2, 5894100], [1760588700, 87.45, 90, 79.8, 81.45, 5827950], [1760589000, 81.5, 87.2, 79, 86.55, 3931800], [1760589300, 86.7, 87, 82.5, 82.95, 2391600], [1760589600, 82.75, 83.3, 76.2, 76.75, 3550575], [1760589900, 76.55, 81.2, 73.95, 80.1, 4843425], [1760590200, 80.25, 84.9, 77.05, 84, 4707900], [1760590500, 83.95, 89.75, 83.65, 87.5, 6431775], [1760590800, 87.4, 93.35, 85.8, 88.6, 5684775], [1760591100, 88.65, 90, 86.95, 89.55, 2615925], [1760591400, 89.7, 92.5, 87.65, 91.35, 3679275], [1760591700, 91.35, 97, 90.45, 94, 6262050], [1760592000, 94.5, 95.3, 88.4, 91.95, 3396150], [1760592300, 91.65, 95.2, 88, 95.1, 3607950], [1760592600, 95.2, 98.95, 91, 92.85, 4889775], [1760592900, 93.15, 94.4, 91, 93.6, 1966125], [1760593200, 93.95, 95.75, 91.4, 91.7, 2002650], [1760593500, 91.6, 93.85, 90.45, 91.95, 1719750], [1760593800, 91.9, 92.9, 86.6, 86.95, 2751750], [1760594100, 87, 91.8, 86.85, 91.2, 2366325], [1760594400, 91.5, 96.1, 85.4, 87, 5004525], [1760594700, 87.3, 90.35, 86.3, 88.95, 1878225], [1760595000, 89.05, 89.9, 83.6, 84.6, 2464125], [1760595300, 84, 85.8, 80.25, 80.35, 2970675], [1760595600, 80.2, 90.25, 80.2, 89.15, 4119525], [1760595900, 89.25, 89.65, 86.05, 87.05, 1932975], [1760596200, 87, 90.2, 86.7, 87.95, 2444475], [1760596500, 88.05, 90, 85.65, 86.7, 1888050], [1760596800, 86.65, 98, 86.5, 97.65, 5151075], [1760597100, 98.25, 103, 95.3, 98.95, 8453025], [1760597400, 98.75, 108.6, 97.4, 107, 7592700], [1760597700, 107.35, 114.2, 106.5, 110.9, 6842250], [1760598000, 111, 119.75, 110.2, 119.75, 7260450], [1760598300, 119.85, 125.45, 114.05, 122.9, 7019325], [1760598600, 123.05, 128.1, 118.6, 119.7, 5529525], [1760598900, 119.2, 121.75, 116.1, 118, 3704850], [1760599200, 118.55, 131.55, 116.85, 128.65, 5332950], [1760599500, 128.5, 130.2, 121.1, 121.35, 3703425], [1760599800, 121.3, 129, 120.9, 125.45, 3237225], [1760600100, 125.05, 127.3, 119.3, 120.45, 2546550], [1760600400, 120.55, 135.95, 120.55, 133.45, 4553025], [1760600700, 133.35, 135.2, 123.15, 124.95, 3755775], [1760601000, 124.6, 129.5, 122.8, 124.45, 2463000], [1760601300, 124.7, 137.6, 124.5, 128.95, 3846525], [1760601600, 129.7, 135.65, 125.9, 135, 2658600], [1760601900, 135.3, 139.75, 130.85, 134.8, 3081375], [1760602200, 134.75, 143.75, 131.2, 141.3, 4117425], [1760602500, 141.2, 148, 140.1, 142.65, 3708150], [1760602800, 142.75, 144, 137.75, 139.8, 1998375], [1760603100, 139.75, 141.85, 135.85, 139.85, 1740450], [1760603400, 140, 147.4, 140, 147.05, 3216450], [1760603700, 147.2, 169.7, 144.05, 166.75, 5441175], [1760604000, 166.35, 172.95, 160.55, 163.8, 3063150], [1760604300, 163.95, 165.85, 152.6, 156.6, 2409900], [1760604600, 156.35, 170.55, 156.05, 169.95, 2498475], [1760604900, 166.8, 169.6, 161.9, 164.95, 2095425], [1760605200, 165.05, 174.9, 161, 170.55, 2158800], [1760605500, 170.65, 193.9, 170.25, 180.75, 3745725], [1760605800, 179.5, 188.35, 179.5, 186.25, 1626150], [1760606100, 186.1, 190, 173.6, 177.25, 2332125], [1760606400, 176.05, 184, 169.95, 180.3, 2123700], [1760606700, 180.35, 188.55, 176.8, 185.95, 1681125], [1760607000, 185.4, 189.9, 167.1, 169.05, 2172225], [1760607300, 168.5, 168.5, 155.55, 159, 2024100], [1760607600, 158.8, 164.55, 152.75, 155.3, 2008575], [1760607900, 154.65, 162.9, 154.35, 158.1, 1339875], [1760608200, 158, 161.45, 155.3, 158.5, 1308750], [1760608500, 158.4, 159.65, 155.55, 156.75, 1483875]], 'code': 200, 'message': '', 's': 'ok'}
DUMMY_DATA_2 = {'candles': [[1760413500, 248.1, 250.15, 229.1, 229.8, 139425], [1760413800, 230, 232.05, 217, 220.45, 150000], [1760414100, 220.55, 231.1, 218.5, 224.6, 67800], [1760414400, 224.6, 232, 221, 230.35, 36900], [1760414700, 231.8, 258.95, 224.35, 256.5, 119400], [1760415000, 258, 268.6, 240.3, 265.3, 84075], [1760415300, 264.8, 273.45, 252.4, 262.35, 70050], [1760415600, 262.6, 272.7, 257.7, 268.8, 42675], [1760415900, 268.15, 281.45, 268.15, 276.6, 52650], [1760416200, 276.6, 319.95, 266.8, 299.95, 120225], [1760416500, 303.6, 320, 296.2, 297.15, 42075], [1760416800, 297.6, 305, 291.25, 294.75, 24375], [1760417100, 299.5, 320, 296.15, 312.6, 32175], [1760417400, 312.6, 326.5, 303.7, 305.3, 37425], [1760417700, 300.2, 305.25, 288.9, 290.2, 21675], [1760418000, 290.4, 299.45, 286.1, 290, 16725], [1760418300, 290.6, 302.05, 286.05, 295.15, 25875], [1760418600, 295.45, 300.3, 281.6, 283.05, 21900], [1760418900, 282.05, 289.65, 267.6, 289.65, 26400], [1760419200, 290.85, 301, 290, 294.55, 44250], [1760419500, 295.3, 298.75, 283.35, 296.1, 15000], [1760419800, 296.1, 307, 295.2, 302, 35175], [1760420100, 302, 331, 300, 322.25, 49125], [1760420400, 324.45, 334.65, 316, 318.1, 37800], [1760420700, 318.85, 359.1, 318.85, 352.5, 63300], [1760421000, 353.9, 361.4, 346.35, 359, 44250], [1760421300, 360.05, 375.65, 357.05, 360, 66525], [1760421600, 358.25, 375, 358.25, 362.2, 36225], [1760421900, 361.3, 361.7, 348.65, 350, 21900], [1760422200, 350, 357.15, 344, 355.5, 23475], [1760422500, 354.85, 370.5, 350, 355.15, 18900], [1760422800, 355.5, 361.9, 349.15, 349.2, 13275], [1760423100, 349.25, 356, 339, 344, 23325], [1760423400, 342.8, 350.25, 339, 347, 32025], [1760423700, 350, 377.95, 349.5, 376.7, 30150], [1760424000, 376.5, 390.75, 375, 379.4, 36675], [1760424300, 379.1, 387.25, 370.7, 374.4, 14475], [1760424600, 374.4, 384.35, 368.75, 371.4, 13500], [1760424900, 371.4, 405.1, 371.4, 404, 37575], [1760425200, 406.05, 406.05, 391, 392.65, 34650], [1760425500, 392.65, 421.3, 390.05, 421.3, 37725], [1760425800, 421.3, 426.75, 407.1, 416.2, 35100], [1760426100, 416.2, 420, 403.65, 406.25, 26550], [1760426400, 407.1, 411.15, 399.6, 404.3, 6900], [1760426700, 404.3, 408.25, 393.15, 401.5, 7800], [1760427000, 401.45, 414.25, 397.5, 409.15, 16050], [1760427300, 409.15, 427.9, 396.15, 416.95, 68325], [1760427600, 416.2, 424.45, 408, 413.55, 19275], [1760427900, 413.55, 421.05, 410.55, 417.35, 7350], [1760428200, 417.35, 420.55, 405.65, 412.2, 7425], [1760428500, 412.2, 412.2, 398.7, 399, 29325], [1760428800, 399.95, 400.05, 376, 380.8, 28125], [1760429100, 380.8, 391.2, 374.65, 387, 10500], [1760429400, 385.35, 387.6, 368.65, 381.65, 21825], [1760429700, 380.1, 390.8, 374, 379.45, 18525], [1760430000, 376.9, 395.75, 376.9, 395.75, 17400], [1760430300, 395.1, 395.85, 377.45, 380.8, 10050], [1760430600, 378.3, 382.65, 368, 368.9, 13125], [1760430900, 365, 370.45, 360, 366.75, 14475], [1760431200, 366.75, 388.5, 365.85, 372.75, 16575], [1760431500, 371.15, 385, 367.2, 383.8, 18000], [1760431800, 380, 390.1, 356.15, 357, 22575], [1760432100, 356.1, 361.9, 345.4, 353.3, 27225], [1760432400, 353.3, 353.3, 321.5, 327, 48150], [1760432700, 327, 328.4, 308.35, 319.3, 101925], [1760433000, 317.5, 331.35, 314.8, 325, 49650], [1760433300, 325.2, 346.95, 315.05, 335, 85125], [1760433600, 333.7, 338.15, 326.4, 330.65, 24375], [1760433900, 330.65, 335.25, 324.75, 331.6, 21600], [1760434200, 332.35, 340, 327, 339.8, 33300], [1760434500, 336.95, 345, 333.7, 343.55, 52200], [1760434800, 344, 355.25, 344, 349.25, 43575], [1760435100, 348.65, 352.65, 340.45, 348.9, 62025], [1760435400, 350, 362.05, 347.55, 362.05, 55050], [1760435700, 361.35, 371.9, 361.35, 369.1, 49500], [1760499900, 325, 325, 227.6, 229.05, 596550], [1760500200, 229.3, 234.4, 218, 230.15, 384675], [1760500500, 229.4, 231.35, 217.15, 220.15, 277350], [1760500800, 220.75, 222.55, 210.75, 221.1, 360225], [1760501100, 221.05, 248.7, 220, 247, 675675], [1760501400, 246, 256.4, 239.95, 247.1, 434475], [1760501700, 247.5, 257.65, 235.35, 253.75, 304200], [1760502000, 253.25, 263.45, 246.25, 247.3, 343125], [1760502300, 249, 257.95, 243, 257.6, 166950], [1760502600, 258.25, 261.4, 246.75, 257.25, 188925], [1760502900, 258.15, 259, 239.75, 242, 134775], [1760503200, 242.35, 243.95, 223.95, 225.2, 345375], [1760503500, 225.05, 225.5, 217.7, 222.55, 308625], [1760503800, 222.6, 225.05, 200.5, 201.35, 433950], [1760504100, 202, 206, 197.4, 202.75, 350475], [1760504400, 200.2, 202.65, 188.8, 189.4, 477825], [1760504700, 189.05, 196.6, 186.55, 190.9, 372525], [1760505000, 191.4, 193.3, 185.7, 189.15, 323325], [1760505300, 189.55, 199.45, 188.75, 195.2, 374025], [1760505600, 194.8, 199.5, 172.15, 174.55, 806700], [1760505900, 174.75, 182.4, 171.35, 173.4, 524625], [1760506200, 173, 184.45, 170.85, 183, 642750], [1760506500, 183, 188.9, 180.75, 186.6, 344550], [1760506800, 186.05, 190.3, 184.35, 186.4, 261375], [1760507100, 186.65, 188.5, 184, 186.4, 217425], [1760507400, 185.95, 189.55, 176.1, 176.4, 319950], [1760507700, 176.7, 179, 160.75, 165.55, 487125], [1760508000, 165.15, 176.1, 165.05, 175.6, 484575], [1760508300, 175.25, 180.9, 172.85, 174.85, 400275], [1760508600, 175.5, 179.1, 169.2, 175.6, 313875], [1760508900, 175.3, 185.6, 174.2, 179.1, 471450], [1760509200, 179.4, 182.3, 175, 175.35, 221325], [1760509500, 175.9, 177.35, 170, 174.4, 309225], [1760509800, 174.9, 181.65, 171.4, 181.25, 217950], [1760510100, 181.25, 181.6, 172.8, 180, 236100], [1760510400, 180.3, 184.75, 177.5, 183.4, 246525], [1760510700, 183.4, 189.65, 178.35, 186.85, 463275], [1760511000, 186, 192.3, 183.45, 187.35, 329475], [1760511300, 186.9, 192.35, 176.7, 177.55, 394200], [1760511600, 178.3, 180, 174.45, 175.25, 237150], [1760511900, 174.9, 181.6, 174.9, 176.8, 217725], [1760512200, 176.15, 178, 166.1, 167.1, 396075], [1760512500, 166.95, 171.85, 164.6, 169.1, 328125], [1760512800, 169.05, 169.65, 160.6, 160.8, 346500], [1760513100, 160.95, 165.45, 156.55, 159.55, 443250], [1760513400, 159.1, 162.2, 157.05, 161.1, 382725], [1760513700, 161.5, 163, 158.05, 162.15, 284250], [1760514000, 162.5, 166, 161, 164.8, 344625], [1760514300, 163.5, 164.5, 145.8, 150.8, 863775], [1760514600, 150.6, 151.65, 144, 150.05, 650925], [1760514900, 149.9, 150.9, 145.15, 150.3, 528000], [1760515200, 150.3, 150.5, 142, 142.45, 558375], [1760515500, 142.65, 149.2, 141.5, 149.05, 593175], [1760515800, 149.05, 152, 147.4, 151.7, 701925], [1760516100, 151.7, 156.5, 148.8, 156.05, 723900], [1760516400, 156, 160.15, 154, 160, 534975], [1760516700, 160.3, 165.75, 157.55, 163.9, 730800], [1760517000, 163.9, 169.9, 160.8, 169.3, 712875], [1760517300, 169.7, 172.6, 161.75, 166, 807975], [1760517600, 166.4, 172.35, 161.2, 166.75, 583800], [1760517900, 166.75, 170.7, 162.2, 163.85, 473100], [1760518200, 163.6, 168.35, 161.8, 164.4, 352575], [1760518500, 164.25, 165.3, 156.25, 160.05, 391725], [1760518800, 160.2, 162.95, 157.45, 159.75, 348000], [1760519100, 159.7, 166.65, 156.9, 166.15, 412050], [1760519400, 166.6, 168, 155.7, 160.6, 529425], [1760519700, 160.65, 178.05, 159.2, 174, 949275], [1760520000, 174.65, 179.5, 168.25, 171, 745050], [1760520300, 172, 173.8, 168, 169.9, 360975], [1760520600, 170.4, 178, 169.5, 173, 593700], [1760520900, 173.6, 175.4, 166.6, 167.8, 373200], [1760521200, 168.2, 170.5, 159.2, 161.3, 561000], [1760521500, 161.7, 164.75, 155.85, 160.45, 582225], [1760521800, 160.1, 162, 157.7, 160.6, 358500], [1760522100, 160.9, 161.55, 156.8, 157.05, 403050], [1760586300, 115, 134, 105, 111.35, 3990150], [1760586600, 111.05, 115.75, 101.35, 109.85, 2934000], [1760586900, 109.55, 112.5, 97.9, 101.3, 3385650], [1760587200, 101.2, 103.75, 95.8, 101.3, 2302575], [1760587500, 101.2, 113.35, 96.5, 113.2, 3592050], [1760587800, 113.25, 115.65, 101.2, 101.55, 4413525], [1760588100, 100.65, 106.2, 98.8, 102.05, 2233650], [1760588400, 102.05, 105.4, 93.45, 94.85, 3070275], [1760588700, 94.65, 103.25, 92.5, 101.35, 3092925], [1760589000, 101.55, 104.15, 95.2, 96.3, 2499075], [1760589300, 96.3, 101.45, 96.05, 101.2, 1537050], [1760589600, 101.15, 110.55, 100.5, 109.2, 3244275], [1760589900, 109.3, 113.2, 102.75, 104.4, 3364200], [1760590200, 104.45, 108, 97.35, 99, 3029925], [1760590500, 98.8, 99.3, 90.9, 94.85, 3218625], [1760590800, 94.8, 95.9, 88.75, 92.6, 2514600], [1760591100, 92.45, 94.6, 91.6, 92.2, 1489500], [1760591400, 92.25, 93.8, 90, 91.6, 1621050], [1760591700, 91.45, 92.35, 87.65, 89.85, 2365950], [1760592000, 89.55, 93.2, 89.1, 90.45, 2178375], [1760592300, 90.75, 93.4, 86.75, 87, 1852575], [1760592600, 86.95, 90.6, 83.8, 89.15, 2541075], [1760592900, 89.2, 90.6, 88, 88.35, 1379625], [1760593200, 88.3, 90.75, 87.25, 90.55, 1263975], [1760593500, 90.55, 91.25, 88.35, 90.75, 1461150], [1760593800, 90.9, 93.65, 88.9, 93.4, 2206425], [1760594100, 93.4, 93.5, 89, 89.85, 1802025], [1760594400, 89.75, 93.45, 84.2, 92.35, 3474075], [1760594700, 92.2, 93.3, 88.9, 91.05, 1801575], [1760595000, 91.15, 94.8, 89.85, 93.85, 2130150], [1760595300, 94.2, 97.35, 92.05, 97.35, 3050550], [1760595600, 97.5, 97.5, 87.1, 88, 2984775], [1760595900, 88.1, 90.5, 87.35, 89.75, 1687275], [1760596200, 89.8, 90, 86, 88.6, 1561050], [1760596500, 88.5, 90.4, 86.3, 89.4, 1100475], [1760596800, 89.25, 89.45, 77.85, 78.15, 3309750], [1760597100, 77.9, 80.35, 76.25, 78.25, 3736350], [1760597400, 78.2, 79.15, 74.5, 74.5, 3827700], [1760597700, 74.3, 75.05, 72.7, 73.4, 3888675], [1760598000, 73.3, 74.6, 70.05, 70.55, 5064450], [1760598300, 70.45, 72.95, 68.6, 70.2, 3992700], [1760598600, 70.3, 73.2, 69.7, 72.3, 3530700], [1760598900, 72.55, 73.55, 71.4, 73, 3433050], [1760599200, 72.9, 72.9, 67, 68.55, 3500850], [1760599500, 68.7, 70.3, 68.5, 70, 2595525], [1760599800, 70.2, 70.5, 66.65, 68.4, 3014325], [1760600100, 68.2, 71.25, 68.05, 70.4, 1888800], [1760600400, 70.5, 70.5, 65.35, 66.45, 2937225], [1760600700, 66.45, 68.5, 65, 68.45, 3407475], [1760601000, 68.45, 69.2, 67.15, 68.7, 2184675], [1760601300, 68.7, 68.85, 64.25, 66.15, 3045000], [1760601600, 66.05, 68, 63.15, 63.55, 2829600], [1760601900, 63.6, 65.4, 61.55, 63.6, 2630100], [1760602200, 63.4, 64.95, 61, 61.65, 3648825], [1760602500, 61.85, 63.2, 61.4, 62.45, 2668200], [1760602800, 62.45, 63.15, 61.4, 62.35, 2065725], [1760603100, 62.35, 63.65, 61.85, 62.75, 1977750], [1760603400, 62.8, 62.8, 58.6, 59.2, 4054575], [1760603700, 59.15, 60.2, 53.65, 54.75, 5190750], [1760604000, 54.7, 55.6, 52.45, 54.15, 3501675], [1760604300, 54.1, 57.95, 53.9, 57.15, 3204300], [1760604600, 57, 58.3, 53.25, 53.4, 2738175], [1760604900, 54.4, 56.45, 52.15, 53.5, 2665050], [1760605200, 53.45, 54.1, 48.55, 50.4, 3392025], [1760605500, 50.2, 50.45, 47.35, 50, 4754250], [1760605800, 50, 50.05, 47.2, 48.45, 1901250], [1760606100, 48.95, 52.65, 48.1, 52.25, 2788725], [1760606400, 52.45, 53.65, 50.2, 51.35, 2979375], [1760606700, 51.35, 51.65, 46.55, 47.8, 2831475], [1760607000, 47.6, 52.35, 45.85, 51.7, 3490875], [1760607300, 51.85, 55.15, 51.35, 53.4, 5174850], [1760607600, 53.45, 55.85, 50.6, 53.55, 3741825], [1760607900, 53.95, 54, 51.4, 53.6, 3026325], [1760608200, 53.5, 54, 51.3, 53.1, 3856050], [1760608500, 53.35, 57.4, 52.6, 54.3, 5118675], [1760586300, 115, 134, 105, 111.35, 3990150], [1760586600, 111.05, 115.75, 101.35, 109.85, 2934000], [1760586900, 109.55, 112.5, 97.9, 101.3, 3385650], [1760587200, 101.2, 103.75, 95.8, 101.3, 2302575], [1760587500, 101.2, 113.35, 96.5, 113.2, 3592050], [1760587800, 113.25, 115.65, 101.2, 101.55, 4413525], [1760588100, 100.65, 106.2, 98.8, 102.05, 2233650], [1760588400, 102.05, 105.4, 93.45, 94.85, 3070275], [1760588700, 94.65, 103.25, 92.5, 101.35, 3092925], [1760589000, 101.55, 104.15, 95.2, 96.3, 2499075], [1760589300, 96.3, 101.45, 96.05, 101.2, 1537050], [1760589600, 101.15, 110.55, 100.5, 109.2, 3244275], [1760589900, 109.3, 113.2, 102.75, 104.4, 3364200], [1760590200, 104.45, 108, 97.35, 99, 3029925], [1760590500, 98.8, 99.3, 90.9, 94.85, 3218625], [1760590800, 94.8, 95.9, 88.75, 92.6, 2514600], [1760591100, 92.45, 94.6, 91.6, 92.2, 1487100], [1760591400, 92.25, 93.8, 90, 91.6, 1621050], [1760591700, 91.45, 92.35, 87.65, 89.85, 2365950], [1760592000, 89.55, 93.2, 89.1, 90.45, 2178375], [1760592300, 90.75, 93.4, 86.75, 87, 1849875], [1760592600, 86.95, 90.6, 83.8, 89.15, 2537775], [1760592900, 89.2, 90.6, 88, 88.35, 1374450], [1760593200, 88.3, 90.75, 87.25, 90.55, 1263975], [1760593500, 90.55, 91.25, 88.35, 90.75, 1461150], [1760593800, 90.9, 93.65, 88.9, 93.4, 2206425], [1760594100, 93.4, 93.5, 89, 89.85, 1800000], [1760594400, 89.75, 93.45, 84.2, 92.35, 3433350], [1760594700, 92.2, 93.3, 88.9, 91.05, 1795650], [1760595000, 91.15, 94.8, 89.85, 93.85, 2130150], [1760595300, 94.2, 97.35, 92.05, 97.35, 3047175], [1760595600, 97.5, 97.5, 87.1, 88, 2953200], [1760595900, 88.1, 90.5, 87.35, 89.75, 1687275], [1760596200, 89.8, 90, 86, 88.6, 1548000], [1760596500, 88.5, 90.4, 86.3, 89.4, 1100475], [1760596800, 89.25, 89.45, 77.85, 78.15, 3309750], [1760597100, 77.9, 80.35, 76.25, 78.25, 3729150], [1760597400, 78.2, 79.15, 74.5, 74.5, 3827700], [1760597700, 74.3, 75.05, 72.7, 73.4, 3888600], [1760598000, 73.3, 74.6, 70.05, 70.55, 5064450], [1760598300, 70.45, 72.95, 68.6, 70.2, 3992700], [1760598600, 70.3, 73.2, 69.7, 72.3, 3530700], [1760598900, 72.55, 73.55, 71.4, 73, 3433050], [1760599200, 72.9, 72.9, 67, 68.55, 3500850], [1760599500, 68.7, 70.3, 68.5, 70, 2592150], [1760599800, 70.2, 70.5, 66.65, 68.4, 3012225], [1760600100, 68.2, 71.25, 68.05, 70.4, 1888800], [1760600400, 70.5, 70.5, 65.35, 66.45, 2937225], [1760600700, 66.45, 68.5, 65, 68.45, 3407475], [1760601000, 68.45, 69.2, 67.15, 68.7, 2184675], [1760601300, 68.7, 68.85, 64.25, 66.15, 3041625], [1760601600, 66.05, 68, 63.15, 63.55, 2829600], [1760601900, 63.6, 65.4, 61.55, 63.6, 2630100], [1760602200, 63.4, 64.95, 61, 61.65, 3648825], [1760602500, 61.85, 63.2, 61.4, 62.45, 2668200], [1760602800, 62.45, 63.15, 61.4, 62.35, 2065725], [1760603100, 62.35, 63.65, 61.85, 62.75, 1977750], [1760603400, 62.8, 62.8, 58.6, 59.2, 4054575], [1760603700, 59.15, 60.2, 53.65, 54.75, 5190750], [1760604000, 54.7, 55.6, 52.45, 54.15, 3458850], [1760604300, 54.1, 57.95, 53.9, 57.15, 3204300], [1760604600, 57, 58.3, 53.25, 53.4, 2738175], [1760604900, 54.4, 56.45, 52.15, 53.5, 2665050], [1760605200, 53.45, 54.1, 48.55, 50.4, 3392025], [1760605500, 50.2, 50.45, 47.35, 50, 4753200], [1760605800, 50, 50.05, 47.2, 48.45, 1896975], [1760606100, 48.95, 52.65, 48.1, 52.25, 2788725], [1760606400, 52.45, 53.65, 50.2, 51.35, 2979375], [1760606700, 51.35, 51.65, 46.55, 47.8, 2831475], [1760607000, 47.6, 52.35, 45.85, 51.7, 3490800], [1760607300, 51.85, 55.15, 51.35, 53.4, 5172750], [1760607600, 53.45, 55.85, 50.6, 53.55, 3741825], [1760607900, 53.95, 54, 51.4, 53.6, 3026325], [1760608200, 53.5, 54, 51.3, 53.1, 3856050], [1760608500, 53.35, 57.4, 52.6, 54.3, 5116500]], 'code': 200, 'message': '', 's': 'ok'}


# --- OPTIONS DATA (Unchanged) ---
OPTIONS_DATA = {'code': 200, 'data': {'callOi': 185190600, 'expiryData': [{'date': '14-10-2025', 'expiry': '1760436000'}, {'date': '20-10-2025', 'expiry': '1760954400'}, {'date': '28-10-2025', 'expiry': '1761645600'}, {'date': '04-11-2025', 'expiry': '1762250400'}, {'date': '11-11-2025', 'expiry': '1762855200'}, {'date': '25-11-2025', 'expiry': '1764064800'}, {'date': '30-12-2025', 'expiry': '1767088800'}, {'date': '31-03-2026', 'expiry': '1774951200'}, {'date': '30-06-2026', 'expiry': '1782813600'}, {'date': '29-09-2026', 'expiry': '1790676000'}, {'date': '29-12-2026', 'expiry': '1798538400'}, {'date': '29-06-2027', 'expiry': '1814263200'}, {'date': '28-12-2027', 'expiry': '1829988000'}, {'date': '27-06-2028', 'expiry': '1845712800'}, {'date': '26-12-2028', 'expiry': '1861437600'}, {'date': '26-06-2029', 'expiry': '1877162400'}, {'date': '24-12-2029', 'expiry': '1892800800'}, {'date': '25-06-2030', 'expiry': '1908612000'}], 'indiavixData': {'ask': 0, 'bid': 0, 'description': 'INDIAVIX-INDEX', 'ex_symbol': 'INDIAVIX', 'exchange': 'NSE', 'fyToken': '101000000026017', 'ltp': 11.16, 'ltpch': 0.15, 'ltpchp': 1.36, 'option_type': '', 'strike_price': -1, 'symbol': 'NSE:INDIAVIX-INDEX'}, 'optionsChain': [{'ask': 0, 'bid': 0, 'description': 'NIFTY50-INDEX', 'ex_symbol': 'NIFTY', 'exchange': 'NSE', 'fp': 25185.5, 'fpch': -123.8, 'fpchp': -0.49, 'fyToken': '101000000026000', 'ltp': 25145.5, 'ltpch': -81.85, 'ltpchp': -0.32, 'option_type': '', 'strike_price': -1, 'symbol': 'NSE:NIFTY50-INDEX'}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442670', 'ltp': 0.05, 'ltpch': -5.7, 'ltpchp': -99.13, 'oi': 5555025, 'oich': -1942875, 'oichp': -25.91, 'option_type': 'PE', 'prev_oi': 7497900, 'strike_price': 24900, 'symbol': 'NSE:NIFTY25O1424900PE', 'volume': 536404575}, {'ask': 246, 'bid': 245.3, 'fyToken': '101125101442669', 'ltp': 246.1, 'ltpch': -105.05, 'ltpchp': -29.92, 'oi': 302850, 'oich': -54225, 'oichp': -15.19, 'option_type': 'CE', 'prev_oi': 357075, 'strike_price': 24900, 'symbol': 'NSE:NIFTY25O1424900CE', 'volume': 13907775}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442672', 'ltp': 0.05, 'ltpch': -6.95, 'ltpchp': -99.29, 'oi': 3968625, 'oich': -921375, 'oichp': -18.84, 'option_type': 'PE', 'prev_oi': 4890000, 'strike_price': 24950, 'symbol': 'NSE:NIFTY25O1424950PE', 'volume': 708610500}, {'ask': 195.6, 'bid': 195.2, 'fyToken': '101125101442671', 'ltp': 195.35, 'ltpch': -107.45, 'ltpchp': -35.49, 'oi': 329325, 'oich': 220950, 'oichp': 203.88, 'option_type': 'CE', 'prev_oi': 108375, 'strike_price': 24950, 'symbol': 'NSE:NIFTY25O1424950CE', 'volume': 19457850}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442676', 'ltp': 0.05, 'ltpch': -9.05, 'ltpchp': -99.45, 'oi': 8184300, 'oich': -5162300, 'oichp': -38.68, 'option_type': 'PE', 'prev_oi': 13346600, 'strike_price': 25000, 'symbol': 'NSE:NIFTY25O1425000PE', 'volume': 1289483250}, {'ask': 145.6, 'bid': 145.5, 'fyToken': '101125101442673', 'ltp': 145.6, 'ltpch': -107.2, 'ltpchp': -42.41, 'oi': 1034025, 'oich': -1081355, 'oichp': -51.12, 'option_type': 'CE', 'prev_oi': 2115380, 'strike_price': 25000, 'symbol': 'NSE:NIFTY25O1425000CE', 'volume': 154949700}, {'ask': 95.7, 'bid': 95.55, 'fyToken': '101125101442677', 'ltp': 95.55, 'ltpch': -109.95, 'ltpchp': -53.5, 'oi': 1216875, 'oich': 521625, 'oichp': 75.03, 'option_type': 'CE', 'prev_oi': 695250, 'strike_price': 25050, 'symbol': 'NSE:NIFTY25O1425050CE', 'volume': 276657975}, {'ask': 0.1, 'bid': 0.05, 'fyToken': '101125101442678', 'ltp': 0.1, 'ltpch': -12, 'ltpchp': -99.17, 'oi': 6897600, 'oich': 1472780, 'oichp': 27.15, 'option_type': 'PE', 'prev_oi': 5424820, 'strike_price': 25050, 'symbol': 'NSE:NIFTY25O1425050PE', 'volume': 1491789750}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442684', 'ltp': 0.05, 'ltpch': -16.95, 'ltpchp': -99.71, 'oi': 12694875, 'oich': 1087775, 'oichp': 9.37, 'option_type': 'PE', 'prev_oi': 11607100, 'strike_price': 25100, 'symbol': 'NSE:NIFTY25O1425100PE', 'volume': 2291730000}, {'ask': 45.7, 'bid': 45.6, 'fyToken': '101125101442679', 'ltp': 45.75, 'ltpch': -115.25, 'ltpchp': -71.58, 'oi': 5883525, 'oich': 3700575, 'oichp': 169.52, 'option_type': 'CE', 'prev_oi': 2182950, 'strike_price': 25100, 'symbol': 'NSE:NIFTY25O1425100CE', 'volume': 1144206225}, {'ask': 4.5, 'bid': 4.4, 'fyToken': '101125101442686', 'ltp': 4.4, 'ltpch': -20.75, 'ltpchp': -82.5, 'oi': 14838525, 'oich': 4807925, 'oichp': 47.93, 'option_type': 'PE', 'prev_oi': 10030600, 'strike_price': 25150, 'symbol': 'NSE:NIFTY25O1425150PE', 'volume': 2832568425}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442685', 'ltp': 0.05, 'ltpch': -118.85, 'ltpchp': -99.96, 'oi': 23567250, 'oich': 21533700, 'oichp': 1058.92, 'option_type': 'CE', 'prev_oi': 2033550, 'strike_price': 25150, 'symbol': 'NSE:NIFTY25O1425150CE', 'volume': 2413773150}, {'ask': 54.4, 'bid': 54.2, 'fyToken': '101125101442690', 'ltp': 54.2, 'ltpch': 15.7, 'ltpchp': 40.78, 'oi': 7350375, 'oich': -8633425, 'oichp': -54.01, 'option_type': 'PE', 'prev_oi': 15983800, 'strike_price': 25200, 'symbol': 'NSE:NIFTY25O1425200PE', 'volume': 1428934050}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442687', 'ltp': 0.05, 'ltpch': -81.85, 'ltpchp': -99.94, 'oi': 22408725, 'oich': 11798625, 'oichp': 111.2, 'option_type': 'CE', 'prev_oi': 10610100, 'strike_price': 25200, 'symbol': 'NSE:NIFTY25O1425200CE', 'volume': 2498457300}, {'ask': 104.2, 'bid': 104.15, 'fyToken': '101125101442692', 'ltp': 104.05, 'ltpch': 44.35, 'ltpchp': 74.29, 'oi': 2177550, 'oich': -3225370, 'oichp': -59.7, 'option_type': 'PE', 'prev_oi': 5402920, 'strike_price': 25250, 'symbol': 'NSE:NIFTY25O1442692PE', 'volume': 569013150}, {'ask': 0.1, 'bid': 0.05, 'fyToken': '101125101442691', 'ltp': 0.05, 'ltpch': -53.9, 'ltpchp': -99.91, 'oi': 9716250, 'oich': 680100, 'oichp': 7.53, 'option_type': 'CE', 'prev_oi': 9036150, 'strike_price': 25250, 'symbol': 'NSE:NIFTY25O1442691CE', 'volume': 1353703275}, {'ask': 154.3, 'bid': 154.05, 'fyToken': '101125101442694', 'ltp': 154.05, 'ltpch': 64.05, 'ltpchp': 71.17, 'oi': 1792650, 'oich': -2282030, 'oichp': -56.01, 'option_type': 'PE', 'prev_oi': 4074680, 'strike_price': 25300, 'symbol': 'NSE:NIFTY25O1442694PE', 'volume': 419480775}, {'ask': 0.1, 'bid': 0.05, 'fyToken': '101125101442693', 'ltp': 0.05, 'ltpch': -33.7, 'ltpchp': -99.85, 'oi': 15067500, 'oich': -281400, 'oichp': -1.83, 'option_type': 'CE', 'prev_oi': 15348900, 'strike_price': 25300, 'symbol': 'NSE:NIFTY25O1442693CE', 'volume': 1197832350}, {'ask': 204.4, 'bid': 203.95, 'fyToken': '101125101442702', 'ltp': 204, 'ltpch': 77.6, 'ltpchp': 61.39, 'oi': 622875, 'oich': -1202775, 'oichp': -65.88, 'option_type': 'PE', 'prev_oi': 1825650, 'strike_price': 25350, 'symbol': 'NSE:NIFTY25O1442702PE', 'volume': 103026450}, {'ask': 0.05, 'bid': 0, 'fyToken': '101125101442695', 'ltp': 0.05, 'ltpch': -20.34, 'ltpchp': -99.75, 'oi': 6757725, 'oich': -3074925, 'oichp': -31.27, 'option_type': 'CE', 'prev_oi': 9832650, 'strike_price': 25350, 'symbol': 'NSE:NIFTY25O1442695CE', 'volume': 634849350}, {'ask': 254.45, 'bid': 254.3, 'fyToken': '101125101442704', 'ltp': 254.3, 'ltpch': 86.15, 'ltpchp': 51.23, 'oi': 383775, 'oich': -797625, 'oichp': -67.52, 'option_type': 'PE', 'prev_oi': 1181400, 'strike_price': 25400, 'symbol': 'NSE:NIFTY25O1442704PE', 'volume': 60465975}, {'ask': 0.1, 'bid': 0.05, 'fyToken': '101125101442703', 'ltp': 0.1, 'ltpch': -11.9, 'ltpchp': -99.17, 'oi': 7892775, 'oich': -6007925, 'oichp': -43.22, 'option_type': 'CE', 'prev_oi': 13900700, 'strike_price': 25400, 'symbol': 'NSE:NIFTY25O1442703CE', 'volume': 505736325}], 'putOi': 136227150}, 'message': '', 's': 'ok'}


# --- NEW TRADING INDICATOR FUNCTIONS ---

def calculate_supertrend(df, period=10, multiplier=3):
    """
    Calculates the Supertrend indicator line and its signal (1=Up/Buy, -1=Down/Sell).
    The DataFrame must contain 'high', 'low', and 'close' columns.
    """
    if df.empty:
        return df

    high = df['high']
    low = df['low']
    close = df['close']

    # 1. Calculate True Range (TR)
    tr1 = high - low
    tr2 = abs(high - close.shift(1))
    tr3 = abs(low - close.shift(1))
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    # 2. Calculate Average True Range (ATR) - Using EWM for smoothing (Wilder's approximation)
    # EWM is used as an approximation for the Wilder's smoothing used in ATR
    atr = tr.ewm(com=period - 1, adjust=False).mean()

    # 3. Calculate Basic Upper and Lower Band
    hl2 = (high + low) / 2
    basic_upper_band = hl2 + (multiplier * atr)
    basic_lower_band = hl2 - (multiplier * atr)

    # 4. Calculate Final Upper and Lower Band (FU/FL) & Supertrend (ST)
    final_upper_band = basic_upper_band.copy()
    final_lower_band = basic_lower_band.copy()
    supertrend_line = pd.Series([np.nan] * len(df), index=df.index)

    # Trend signal: 1=Up/Buy (uses FLB), -1=Down/Sell (uses FUB)
    trend_signal = pd.Series([1] * len(df), index=df.index)

    # Find the first index where ATR is not NaN (i.e., we have enough data)
    first_valid_idx = atr.first_valid_index()
    if first_valid_idx is None:
        # If ATR is all NaN (data too short), return original df with empty columns
        df['Supertrend'] = np.nan
        df['Supertrend_Signal'] = np.nan
        return df

    idx = df.index.get_loc(first_valid_idx)

    # Initialize the first calculated bar (starting from first_valid_idx)
    # If close > Basic LB, initial trend is Up (1), ST line uses FLB
    if close.iloc[idx] > basic_lower_band.iloc[idx]:
        trend_signal.iloc[idx] = 1
        supertrend_line.iloc[idx] = final_lower_band.iloc[idx]
    # If close < Basic UB, initial trend is Down (-1), ST line uses FUB
    elif close.iloc[idx] < basic_upper_band.iloc[idx]:
        trend_signal.iloc[idx] = -1
        supertrend_line.iloc[idx] = final_upper_band.iloc[idx]
    else:
        # Handle the edge case where close is exactly between BUB and BLB at the start
        trend_signal.iloc[idx] = 1 # Default to Up
        supertrend_line.iloc[idx] = final_lower_band.iloc[idx]


    # Iterative calculation starts from the next bar
    for i in range(idx + 1, len(df)):
        # --- Calculate Final Upper Band ---
        # If current Basic UB is less than previous Final UB, or close crossed above previous Final UB (Up-trend continuation)
        # Note: The original Supertrend logic only checks if Basic UB is less than previous FUB
        if basic_upper_band.iloc[i] < final_upper_band.iloc[i-1] or close.iloc[i-1] > final_upper_band.iloc[i-1]:
            final_upper_band.iloc[i] = basic_upper_band.iloc[i]
        else:
            final_upper_band.iloc[i] = final_upper_band.iloc[i-1]

        # --- Calculate Final Lower Band ---
        # If current Basic LB is greater than previous Final LB, or close crossed below previous Final LB (Down-trend continuation)
        # Note: The original Supertrend logic only checks if Basic LB is greater than previous FLB
        if basic_lower_band.iloc[i] > final_lower_band.iloc[i-1] or close.iloc[i-1] < final_lower_band.iloc[i-1]:
            final_lower_band.iloc[i] = basic_lower_band.iloc[i]
        else:
            final_lower_band.iloc[i] = final_lower_band.iloc[i-1]

        # --- Determine Trend Signal & Supertrend Line ---
        prev_signal = trend_signal.iloc[i-1]
        current_signal = prev_signal

        # Switch from Down (-1) to Up (1)
        if prev_signal == -1 and close.iloc[i] > final_lower_band.iloc[i]:
            current_signal = 1

        # Switch from Up (1) to Down (-1)
        elif prev_signal == 1 and close.iloc[i] < final_upper_band.iloc[i]:
            current_signal = -1

        trend_signal.iloc[i] = current_signal

        # Calculate Supertrend Line (The actual line plotted)
        if current_signal == 1:
            supertrend_line.iloc[i] = final_lower_band.iloc[i]
        else:
            supertrend_line.iloc[i] = final_upper_band.iloc[i]

    df['Supertrend'] = supertrend_line
    df['Supertrend_Signal'] = trend_signal

    # Reset index for seamless integration back into the main function (if needed)
    df.reset_index(drop=True, inplace=True)
    return df

# --- END NEW TRADING INDICATOR FUNCTIONS ---


# --- NEW ALERT CHECK FUNCTION (remains the same) ---
def check_for_cross_alert(data1, data2):
    """
    Checks if the last two data points indicate a recent crossing of the two lines.
    Returns:
        'Cross Up' if Symbol 1 crossed above Symbol 2
        'Cross Down' if Symbol 1 crossed below Symbol 2
        None otherwise
    """
    candles1 = data1.get('candles', [])
    candles2 = data2.get('candles', [])

    if len(candles1) < 2 or len(candles2) < 2:
        return None

    A_prev = candles1[-2][4]
    A_curr = candles1[-1][4]

    B_prev = candles2[-2][4]
    B_curr = candles2[-1][4]

    A_is_above_B_curr = A_curr > B_curr
    A_is_above_B_prev = A_prev > B_prev

    if not A_is_above_B_prev and A_is_above_B_curr:
        return 'Cross Up'

    elif A_is_above_B_prev and not A_is_above_B_curr:
        return 'Cross Down'

    return None

# --- UPDATED FUNCTION FOR OI BAR CHART (remains the same) ---
def create_oi_bar_chart(options_data, index_name, selected_expiry):
    """
    Generates a comparison bar chart of Open Interest (OI), Change in OI,
    and Previous OI for different strike prices for a selected expiry.
    """
    options_chain = options_data.get('data', {}).get('optionsChain', [])
    expiry_data = options_data.get('data', {}).get('expiryData', [])

    # Find the full expiry date string (e.g., '14-10-2025')
    expiry_date_str = next((item['date'] for item in expiry_data if item['expiry'] == selected_expiry), selected_expiry)

    # --- Filtering Logic ---
    # In a real scenario, the API would return data already filtered by expiry.
    nifty_ltp = None
    index_entry = next((item for item in options_chain if item.get('symbol') == f'NSE:{index_name.upper()}-INDEX'), None)
    if index_entry:
        nifty_ltp = index_entry.get('ltp')
    symbol_date_fragment = ''
    try:
        first_option_symbol = next(d['symbol'] for d in options_chain if d.get('strike_price', -1) != -1 and d.get('option_type'))

        # Robustly determine the index name portion
        index_name_upper = index_name.upper()
        if index_name_upper in first_option_symbol:
            fragment_start = first_option_symbol.find(index_name_upper) + len(index_name_upper)
            symbol_date_fragment = first_option_symbol[fragment_start:fragment_start+5] # Assumes 5 char date format (e.g., 25O14)

    except (StopIteration, IndexError, TypeError):
        # Fallback if the data structure is inconsistent or empty
        pass

    # Filter based on the symbol fragment (using '25O14' for our dummy data)
    oi_data = [d for d in options_chain
               if d.get('strike_price', -1) != -1
               and d.get('option_type') in ['CE', 'PE']
               and symbol_date_fragment in d.get('symbol', '')]

    if not oi_data:
        # Fallback if filtering fails or data is empty
        return None

    # Group by strike price and option type
    df = pd.DataFrame(oi_data)

    # Filter for the main option types (CE and PE) and relevant columns
    df_filtered = df[df['option_type'].isin(['CE', 'PE'])].rename(
        columns={'strike_price': 'Strike', 'oi': 'OI', 'oich': 'OI_Ch', 'prev_oi': 'Prev_OI', 'option_type': 'Type'}
    )

    # Pivot the table to have Strikes as index and CE/PE as columns
    oi_pivot = df_filtered.pivot(index='Strike', columns='Type', values=['OI', 'OI_Ch', 'Prev_OI']).fillna(0)

    # Flatten the columns for easier access: (OI, CE) -> OI_CE
    oi_pivot.columns = ['_'.join(col).strip() for col in oi_pivot.columns.values]

    strikes = oi_pivot.index.tolist()

    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(14, 7))

    # Determine a good bar width based on strike interval
    strike_interval = strikes[1] - strikes[0] if len(strikes) > 1 else 50
    bar_width = strike_interval * 0.35
    bar_offset_ch = bar_width * 0.6 # offset for OI Change bars

    # --- Plot 1: Current OI (Green/Red) ---
    ax.bar(strikes, oi_pivot['OI_CE'], width=-bar_width, align='edge', color='#FF5255', alpha=0.8, label='Call OI (Current)')
    ax.bar(strikes, oi_pivot['OI_PE'], width=bar_width, align='edge', color='#00C853', alpha=0.8, label='Put OI (Current)')

    # --- Plot 2: Change in OI (Blue for positive, Dark for negative) ---
    # CE OI Change (plots on the Call side)
    ce_ch_color = np.where(oi_pivot['OI_Ch_CE'] > 0, '#00B0FF', '#c91caf') # Blue for increase, Dark Red for decrease
    ax.bar(np.array(strikes) - bar_width + bar_offset_ch, np.abs(oi_pivot['OI_Ch_CE']), width=bar_width*0.5, color=ce_ch_color, label='Call OI Change')

    # PE OI Change (plots on the Put side)
    pe_ch_color = np.where(oi_pivot['OI_Ch_PE'] > 0, '#00B0FF', '#b6c41a') # Blue for increase, Dark Green for decrease
    ax.bar(np.array(strikes) + bar_offset_ch, np.abs(oi_pivot['OI_Ch_PE']), width=bar_width*0.5, color=pe_ch_color, label='Put OI Change')

    # --- Plot 3: Previous OI (Markers) ---
    # Draw Previous OI as markers over the strikes
    ax.scatter(np.array(strikes) - bar_width, oi_pivot['Prev_OI_CE'], color='#FFD700', marker='D', s=40, label='Previous Call OI', zorder=3)
    ax.scatter(np.array(strikes) + bar_width, oi_pivot['Prev_OI_PE'], color='#FFA500', marker='X', s=40, label='Previous Put OI', zorder=3)

    # --- CRITICAL: LTP Vertical Line (The "Live" Reference Point) ---
    if nifty_ltp is not None:
        ax.axvline(x=nifty_ltp, color='#90CAF9', linestyle='--', linewidth=2, label=f'{index_name} LTP ({nifty_ltp:,.2f})', zorder=1)

    # --- CRITICAL: Max OI Annotations (The "Tooltip-Like" Highlights) ---
    if not oi_pivot.empty:
        # Find the strikes with the highest current OI
        max_call_oi_strike = oi_pivot['OI_CE'].idxmax()
        max_put_oi_strike = oi_pivot['OI_PE'].idxmax()

        # Annotate Max Call OI (Resistance)
        max_ce_y = oi_pivot.loc[max_call_oi_strike]['OI_CE']
        if max_ce_y > 0:
            ax.annotate(f'Max Call OI\n(Resistance: {max_call_oi_strike})',
                        xy=(max_call_oi_strike - bar_width, max_ce_y),
                        xytext=(-20, 20), textcoords='offset points',
                        ha='center', va='bottom', fontsize=10, color='white',
                        arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2", color='#FF5255'),
                        bbox=dict(boxstyle="round,pad=0.3", fc="#333333", alpha=0.8, ec="#FF5255"))

        # Annotate Max Put OI (Support)
        max_pe_y = oi_pivot.loc[max_put_oi_strike]['OI_PE']
        if max_pe_y > 0:
            ax.annotate(f'Max Put OI\n(Support: {max_put_oi_strike})',
                        xy=(max_put_oi_strike + bar_width, max_pe_y),
                        xytext=(20, 20), textcoords='offset points',
                        ha='center', va='bottom', fontsize=10, color='white',
                        arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=-.2", color='#00C853'),
                        bbox=dict(boxstyle="round,pad=0.3", fc="#333333", alpha=0.8, ec="#00C853"))


    # Formatting
    ax.set_title(f'Open Interest for {index_name} (Expiry: {expiry_date_str})', fontsize=18, pad=15, color='white')
    ax.set_xlabel('Strike Price', fontsize=14, color='white')
    ax.set_ylabel('Open Interest (Contracts)', fontsize=14, color='white')

    ax.set_xticks(strikes)
    ax.tick_params(axis='x', rotation=45, colors='white')
    ax.tick_params(axis='y', colors='white')

    # Custom y-axis formatter
    def million_formatter(x, pos):
        return f'{x/1000000:.1f}M'

    ax.yaxis.set_major_formatter(plt.FuncFormatter(million_formatter))

    ax.grid(axis='y', linestyle='--', alpha=0.5)
    ax.legend(loc='upper left', ncol=3, facecolor='black', framealpha=0.8, fontsize=10)

    # Add a note for OI Change colors
    fig.text(0.5, 0.01, 'Note: Blue for Net New OI (+ve Change); Darker Shades for OI Unwinding (-ve Change)',
             ha='center', fontsize=10, color='#90CAF9')

    fig.tight_layout(rect=[0, 0.04, 1, 1])

    # --- Save Plot to Memory and Encode ---
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png', transparent=False, dpi=120)
    img_buffer.seek(0)
    plot_data = base64.b64encode(img_buffer.getvalue()).decode('utf-8')
    plt.close(fig)

    return plot_data

# --- Plotting and Interval Functions (create_comparison_chart, get_refresh_interval_seconds, get_chart_dpi) ---
def create_comparison_chart(data_1, data_2, symbol1='Symbol 1', symbol2='Symbol 2', resolution='5 mins'):

    # --- Supertrend Calculation for Symbol 1 ---
    df1 = pd.DataFrame(
        data_1.get('candles', []),
        columns=['timestamp', 'open', 'high', 'low', 'close', 'volume']
    )

    supertrend_line_1 = pd.Series()
    supertrend_signal_1 = pd.Series()
    timestamps_1 = []
    closing_prices_1 = []

    if not df1.empty:
        # Calculate Supertrend (using period=7 for the short dummy data)
        df1 = calculate_supertrend(df1, period=10, multiplier=3)

        # Extract the calculated data
        supertrend_line_1 = df1['Supertrend']
        supertrend_signal_1 = df1['Supertrend_Signal'] # 1=Up, -1=Down
        timestamps_1 = [datetime.datetime.fromtimestamp(ts) for ts in df1['timestamp']]
        closing_prices_1 = df1['close'].tolist()

    # --- Supertrend Calculation for Symbol 2 ---
    df2 = pd.DataFrame(
        data_2.get('candles', []),
        columns=['timestamp', 'open', 'high', 'low', 'close', 'volume']
    )

    supertrend_line_2 = pd.Series()
    supertrend_signal_2 = pd.Series()
    timestamps_2 = []
    closing_prices_2 = []

    if not df2.empty:
        # Calculate Supertrend (using period=7 for the short dummy data)
        df2 = calculate_supertrend(df2, period=10, multiplier=3)

        # Extract the calculated data
        supertrend_line_2 = df2['Supertrend']
        supertrend_signal_2 = df2['Supertrend_Signal'] # 1=Up, -1=Down
        timestamps_2 = [datetime.datetime.fromtimestamp(ts) for ts in df2['timestamp']]
        closing_prices_2 = df2['close'].tolist()


    if not timestamps_1 and not timestamps_2:
        return None

    plt.style.use('dark_background')
    fig, ax1 = plt.subplots(figsize=(14, 7))

    # --- Plot Symbol 1 Price and Supertrend ---
    has_ax1 = bool(timestamps_1)
    if has_ax1:
        color_1 = '#00C853' # Green for Symbol 1 Price
        ax1.set_ylabel(f'Price ({symbol1})', color=color_1, fontsize=14)

        # Plot Symbol 1 Price (Close)
        ax1.plot(timestamps_1, closing_prices_1, color=color_1, linewidth=2, label=f'{symbol1} Price')

        # Plot Supertrend line for Symbol 1
        if not supertrend_line_1.empty:
            # Create a shared time index for plotting segments
            time_index_1 = np.array(timestamps_1)

            # Plotting the Supertrend segments
            # Up Trend (Uses the Lower Band, Signal=1)
            up_trend_values_1 = np.where(supertrend_signal_1 == 1, supertrend_line_1, np.nan)
            ax1.plot(time_index_1, up_trend_values_1, color='#1E90FF', linewidth=3, linestyle='-', label=f'ST ({symbol1} - Buy)', marker='.', markersize=0) # Deep Sky Blue

            # Down Trend (Uses the Upper Band, Signal=-1)
            down_trend_values_1 = np.where(supertrend_signal_1 == -1, supertrend_line_1, np.nan)
            ax1.plot(time_index_1, down_trend_values_1, color='#DC143C', linewidth=3, linestyle='-', label=f'ST ({symbol1} - Sell)', marker='.', markersize=0) # Crimson

        ax1.tick_params(axis='y', labelcolor=color_1)
        ax1.grid(True, which='major', linestyle='-', linewidth=0.5, alpha=0.5)

    # --- Plot Symbol 2 Price (on twin axis if Symbol 1 exists, else on primary axis) ---
    has_ax2_data = bool(timestamps_2)
    has_twin_ax = False
    ax2 = ax1 # Initialize ax2 to ax1 in case no twin axis is needed

    if has_ax2_data:
        if has_ax1:
            ax2 = ax1.twinx()
            color_2 = '#FF5255' # Red for Symbol 2 Price
            ax2.set_ylabel(f'Price ({symbol2})', color=color_2, fontsize=14)
            ax2.plot(timestamps_2, closing_prices_2, color=color_2, linewidth=2, linestyle='--', label=f'{symbol2} Price')
            ax2.tick_params(axis='y', labelcolor=color_2)
            has_twin_ax = True
        else:
            color_2 = '#FF5255'
            ax1.set_ylabel(f'Price ({symbol2})', color=color_2, fontsize=14)
            ax1.plot(timestamps_2, closing_prices_2, color=color_2, linewidth=2, linestyle='-', label=f'{symbol2} Price')
            ax1.tick_params(axis='y', labelcolor=color_2)
            ax1.grid(True, which='major', linestyle='-', linewidth=0.5, alpha=0.5)

        # Plot Supertrend line for Symbol 2 on ax2
        if not supertrend_line_2.empty:
            time_index_2 = np.array(timestamps_2)

            # Plotting the Supertrend segments
            # Up Trend (Uses the Lower Band, Signal=1)
            up_trend_values_2 = np.where(supertrend_signal_2 == 1, supertrend_line_2, np.nan)
            ax2.plot(time_index_2, up_trend_values_2, color='#00FFFF', linewidth=3, linestyle=':', label=f'ST ({symbol2} - Buy)', marker='.', markersize=0) # Cyan

            # Down Trend (Uses the Upper Band, Signal=-1)
            down_trend_values_2 = np.where(supertrend_signal_2 == -1, supertrend_line_2, np.nan)
            ax2.plot(time_index_2, down_trend_values_2, color='#FF4500', linewidth=3, linestyle=':', label=f'ST ({symbol2} - Sell)', marker='.', markersize=0) # Orange Red


    ax1.set_xlabel(f'Time ({resolution} Intervals)', fontsize=14, color='white')

    try:
        res_minutes = int(resolution.split()[0])
    except:
        res_minutes = 5

    ax1.xaxis.set_major_locator(mdates.MinuteLocator(interval=30))
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    ax1.xaxis.set_minor_locator(mdates.MinuteLocator(interval=res_minutes))
    ax1.tick_params(axis='x', rotation=45, colors='white')

    # Consolidate Legends
    lines, labels = [], []
    lines1, labels1 = ax1.get_legend_handles_labels()
    lines.extend(lines1)
    labels.extend(labels1)

    if has_twin_ax:
        lines2, labels2 = ax2.get_legend_handles_labels()
        lines.extend(lines2)
        labels.extend(labels2)

    if lines:
        ax1.legend(lines, labels, loc='upper left', facecolor='black', framealpha=0.8, fontsize=12)

    fig.autofmt_xdate(rotation=45)
    ax1.set_title(f'Price Comparison w/ Supertrend: {symbol1} vs {symbol2} ({resolution})', fontsize=18, pad=15, color='white')
    fig.tight_layout()

    img_buffer = io.BytesIO()
    dynamic_dpi = get_chart_dpi(resolution)
    plt.savefig(img_buffer, format='png', transparent=False, dpi=dynamic_dpi)

    img_buffer.seek(0)
    plot_data = base64.b64encode(img_buffer.getvalue()).decode('utf-8')
    plt.close(fig)

    return plot_data

# --- PLOTLY COMPARISON CHART FUNCTION (create_comparison_chart_plotly) (Unchanged) ---
def create_comparison_chart_plotly(data_1, data_2, symbol1='Symbol 1', symbol2='Symbol 2', resolution='5 mins'):
    """
    Generates an interactive price comparison chart using Plotly.
    Returns:
        Plotly figure rendered as an HTML div string.
    """
    candles_1 = data_1.get('candles', [])
    timestamps_1 = [datetime.datetime.fromtimestamp(c[0]) for c in candles_1]
    closing_prices_1 = [c[4] for c in candles_1]

    candles_2 = data_2.get('candles', [])
    timestamps_2 = [datetime.datetime.fromtimestamp(c[0]) for c in candles_2]
    closing_prices_2 = [c[4] for c in candles_2]

    if not timestamps_1 and not timestamps_2:
        return None

    # Create figure with secondary y-axis
    fig = make_subplots(specs=[[{"secondary_y": True}]])

    # Trace 1: Symbol 1 Price (Primary Y-axis)
    if timestamps_1:
        fig.add_trace(
            go.Scatter(x=timestamps_1, y=closing_prices_1, name=f'{symbol1} Price', line=dict(color='#00C853', width=2)),
            secondary_y=False,
        )

    # Trace 2: Symbol 2 Price (Secondary Y-axis)
    if timestamps_2:
        fig.add_trace(
            go.Scatter(x=timestamps_2, y=closing_prices_2, name=f'{symbol2} Price', line=dict(color='#FF5255', width=2, dash='dash')),
            secondary_y=True,
        )

    # Update layout for a dark theme and better aesthetics
    fig.update_layout(
        title={
            'text': f'Interactive Price Comparison: {symbol1} vs {symbol2} ({resolution})',
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top',
            'font': dict(size=20, color='white')
        },
        plot_bgcolor='#1e1e1e',
        paper_bgcolor='#1e1e1e',
        font=dict(color='white'),
        hovermode="x unified",
        margin=dict(t=50, b=50, l=50, r=50),
        xaxis_title=f'Time ({resolution} Intervals)',
        xaxis=dict(showgrid=True, gridcolor='#333', zeroline=False),
        # --- PRIMARY Y-AXIS CORRECTION APPLIED HERE ---
        yaxis=dict(
            showgrid=True,
            gridcolor='#333',
            title=dict(
                text=f'Price ({symbol1})',
                font=dict(color='#00C853') # Correct: title is a dict with text and font
            ),
            tickfont=dict(color='#00C853')
        ),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )

    # --- SECONDARY Y-AXIS CORRECTION APPLIED HERE ---
    if timestamps_2:
        fig.update_yaxes(
            # Correct: Use 'title' dictionary with 'text' and 'font' sub-dictionary
            title=dict(
                text=f'Price ({symbol2})',
                font=dict(color='#FF5255')
            ),
            tickfont=dict(color='#FF5255'),
            secondary_y=True,
            showgrid=False # Only show grid for the primary axis
        )

    # Hide secondary y-axis if no data for symbol 2
    if not timestamps_2:
        fig.update_yaxes(secondary_y=True, visible=False)

    # Return the HTML for embedding, excluding full HTML tags and including JS via CDN
    return fig.to_html(full_html=False, include_plotlyjs='cdn')


def get_chart_dpi(resolution):
    """Sets a DPI for Matplotlib based on the selected resolution for quality control."""
    resolution = resolution.lower()
    if 'day' in resolution:
        return 150
    elif 'hour' in resolution:
        return 120
    elif 'min' in resolution:
        return 100
    return 100

def get_refresh_interval_seconds(resolution_str):
    """Converts a resolution string (e.g., '5 mins') into a refresh interval in seconds."""
    try:
        parts = resolution_str.split()
        if len(parts) == 2:
            num = int(parts[0])
            unit = parts[1].lower()

            if 'min' in unit:
                interval_s = num * 60
            elif 'hour' in unit:
                interval_s = num * 3600
            elif 'day' in unit:
                interval_s = num * 86400
            else:
                interval_s = 5

            return max(interval_s, 5)

    except:
        pass
    return 5
# --- END Utility Functions ---


def retres_value(value):
    cases = {
        "1 min": "1",
        "3 mins": "3",
        "5 mins": "5",
        "15 mins": "15",
        "30 mins": "30",
        "1 hour": "60",
        "2 hours": "120",
        "4 hours": "30",
        "1 day": "1D"

    }
    return cases.get(value, "5")


@app.route('/', methods=['GET', 'POST'])
def home():
    plot_data = None
    oi_plot_data = None
    plotly_plot_data = None
    cross_alert = None

    # Get metadata from the global OPTIONS_DATA for default values and dropdown
    options_data = OPTIONS_DATA
    expiry_data = options_data.get('data', {}).get('expiryData', [])
    default_expiry = expiry_data[0]['expiry'] if expiry_data else 'N/A'

    # Attempt to derive default index name (e.g., NIFTY50)
    options_chain = options_data.get('data', {}).get('optionsChain', [])

    # Find the index record (first record with strike_price = -1 and a description)
    index_record = next((d for d in options_chain if d.get('strike_price', -1) == -1 and 'description' in d), {})
    default_index = 'NIFTY50'
    if index_record and 'description' in index_record:
        default_index = index_record['description'].split('-')[0]

    # Initialize input values
    input_values = {
        'token': 'YOUR_ACCESS_TOKEN',
        'redirect_uri': 'http://localhost:8000/auth',
        'client_id': 'YOUR_CLIENT_ID',
        'secret_key': 'YOUR_SECRET_KEY',
        'symbol1': 'ACC',
        'symbol2': 'RELIANCE',
        'days': '1',
        'resolution': '5 mins',
        'refresh_interval': '300',
        'index_name': default_index,
        'selected_expiry': default_expiry
    }

    # Initialize data snapshot values
    latest_price_1 = 'N/A'
    latest_price_2 = 'N/A'
    total_call_oi = options_data.get('data', {}).get('callOi', 'N/A')
    total_put_oi = options_data.get('data', {}).get('putOi', 'N/A')

    # --- New Data Extraction for User Request ---
    indiavix_data = options_data.get('data', {}).get('indiavixData', {})

    # Data from the first optionsChain record (the index/stock record)
    first_option_fp = index_record.get('fp', 'N/A')
    first_option_fpch = index_record.get('fpch', 'N/A')
    first_option_ltp = index_record.get('ltp', 'N/A')    # NEW
    first_option_ltpch = index_record.get('ltpch', 'N/A') # NEW
    # -------------------------------------------

    data1 = DUMMY_DATA_1
    data2 = DUMMY_DATA_2
    options_data = options_data

    # Handle form submission
    if request.method == 'POST':
        # Read all form fields
        input_values['token'] = request.form.get('token', '')
        input_values['redirect_uri'] = request.form.get('redirect_uri', '')
        input_values['client_id'] = request.form.get('client_id', '')
        input_values['secret_key'] = request.form.get('secret_key', '')
        input_values['symbol1'] = request.form.get('symbol1', 'SYM1')
        input_values['symbol2'] = request.form.get('symbol2', 'SYM2')
        input_values['days'] = request.form.get('days', '1')
        input_values['resolution'] = request.form.get('resolution', '5 mins')
        input_values['index_name'] = request.form.get('index_name', default_index)
        input_values['selected_expiry'] = request.form.get('selected_expiry', default_expiry)

        # Handle refresh interval
        manual_refresh = request.form.get('refresh_interval', '')
        default_interval_s = get_refresh_interval_seconds(input_values['resolution'])

        try:
            input_values['refresh_interval'] = str(max(int(manual_refresh), 5))
        except ValueError:
            input_values['refresh_interval'] = str(default_interval_s)

        # --- Data Processing ---
        res=retres_value(input_values['resolution'])
        #print("res=",res)
        res_data=t1.responseData(input_values['redirect_uri'],input_values['client_id'],input_values['secret_key'],
                              input_values['token'],input_values['symbol1'] ,input_values['symbol2'],input_values['days'],
                                 "5", input_values['index_name'] )
        #print(res_data)
        if(res_data[0] is None or res_data[1] is None or res_data[2] is None):
            data1 = DUMMY_DATA_1
            data2 = DUMMY_DATA_2
            options_data = OPTIONS_DATA
        else:
            data1 = res_data[0]
            data2 = res_data[1]
            options_data = res_data[2]
        total_call_oi = options_data.get('data', {}).get('callOi', 'N/A')
        total_put_oi = options_data.get('data', {}).get('putOi', 'N/A')

        #options_data = options_data
        expiry_data = options_data.get('data', {}).get('expiryData', [])
        default_expiry = expiry_data[0]['expiry'] if expiry_data else 'N/A'

        # Attempt to derive default index name (e.g., NIFTY50)
        options_chain = options_data.get('data', {}).get('optionsChain', [])

        # Find the index record (first record with strike_price = -1 and a description)
        index_record = next((d for d in options_chain if d.get('strike_price', -1) == -1 and 'description' in d), {})
        default_index = 'NIFTY50'
        if index_record and 'description' in index_record:
            default_index = index_record['description'].split('-')[0]


        # --- New Data Extraction for User Request ---
        indiavix_data = options_data.get('data', {}).get('indiavixData', {})

        # Data from the first optionsChain record (the index/stock record)
        first_option_fp = index_record.get('fp', 'N/A')
        first_option_fpch = index_record.get('fpch', 'N/A')
        first_option_ltp = index_record.get('ltp', 'N/A')    # NEW
        first_option_ltpch = index_record.get('ltpch', 'N/A') # NEW
        # -------------------------------------------

        # Latest Price Snapshot
        latest_price_1 = data1['candles'][-1][4] if data1.get('candles') and data1['candles'] else 'N/A'
        latest_price_2 = data2['candles'][-1][4] if data2.get('candles') and data2['candles'] else 'N/A'


        # Check for the crossing alert
        cross_alert = check_for_cross_alert(data1, data2)

        # Generate Price Comparison Chart
        plot_data = create_comparison_chart(
            data1,
            data2,
            input_values['symbol1'],
            input_values['symbol2'],
            input_values['resolution']
        )

        # Generate Price Comparison Chart (Plotly)
        plotly_plot_data = create_comparison_chart_plotly(
            data1,
            data2,
            input_values['symbol1'],
            input_values['symbol2'],
            input_values['resolution']
        )

        # Generate OI Bar Chart
        oi_plot_data = create_oi_bar_chart(
            options_data,
            input_values['index_name'],
            input_values['selected_expiry']
        )

    else:
        # Initial GET request
        default_interval_s = get_refresh_interval_seconds(input_values['resolution'])
        input_values['refresh_interval'] = str(default_interval_s)

        # Latest Price Snapshot for initial load
        latest_price_1 = data1['candles'][-1][4] if data1.get('candles') and data1['candles'] else 'N/A'
        latest_price_2 = data2['candles'][-1][4] if data2.get('candles') and data2['candles'] else 'N/A'

        # Generate initial plots
        plot_data = create_comparison_chart(data1, data2)
        plotly_plot_data = create_comparison_chart_plotly(data1, data2)
        oi_plot_data = create_oi_bar_chart(options_data, input_values['index_name'], input_values['selected_expiry'])


    refresh_interval_ms = int(input_values['refresh_interval']) * 1000

    # --- HTML Template (Updated to include new controls and data snapshot) ---
    template_html = '''
        <!doctype html>
        <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
            <title>Price Comparison Dashboard</title>
            <style>
              body {
                background-color: #121212;
                color: #e0e0e0;
                font-family: sans-serif;
                margin: 0;
                padding: 20px;
              }
              .header {
                text-align: center;
                margin-bottom: 20px;
                color: #ffffff;
              }
              .dashboard-container {
                display: flex;
                flex-direction: column;
                gap: 20px;
                max-width: 1400px;
                margin: 0 auto;
              }
              .controls {
                background-color: #1e1e1e;
                padding: 20px;
                border-radius: 15px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
              }
              .form-row {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                align-items: flex-end;
                width: 100%;
                margin-top: 15px;
              }
              .input-group {
                display: flex;
                flex-direction: column;
                min-width: 150px;
                flex-grow: 1;
              }
              .input-group.lg {
                flex-grow: 2;
                min-width: 250px;
              }
              label {
                margin-bottom: 5px;
                color: #90CAF9;
                font-weight: bold;
              }
              input[type="text"], input[type="number"], select {
                padding: 10px;
                border: 1px solid #333;
                border-radius: 5px;
                background-color: #2c2c2c;
                color: #e0e0e0;
                min-height: 40px;
              }
              button {
                padding: 10px 20px;
                background-color: #00C853;
                color: black;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
                transition: background-color 0.3s;
                min-height: 40px; 
                flex-grow: 0.5;
              }
              button:hover {
                background-color: #009624;
              }
              .chart-container {
                background-color: #1e1e1e;
                padding: 20px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
                text-align: center;
              }
              img {
                  max-width: 100%;
                  height: auto;
                  display: block;
                  margin: 0 auto;
              }
              /* --- ALERT & SNAPSHOT STYLES --- */
              .alert-box {
                  padding: 15px;
                  margin-bottom: 20px;
                  border-radius: 8px;
                  font-weight: bold;
                  text-align: center;
                  animation: pulse 1s infinite alternate;
              }
              .alert-up {
                  background-color: #00C853; /* Green */
                  color: black;
              }
              .alert-down {
                  background-color: #FF5255; /* Red */
                  color: black;
              }
              .data-snapshot, .market-data-snapshot { /* Combined style */
                  background-color: #1e1e1e;
                  padding: 15px 20px;
                  border-radius: 15px;
                  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
                  text-align: left;
              }
              .snapshot-row {
                  display: flex;
                  flex-wrap: wrap;
                  gap: 40px;
                  margin-top: 10px;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Dual Price Series Chart Dashboard 📈</h1>
              <p>Parameters for API Configuration and Data Request</p>
            </div>
            
            <div class="dashboard-container">
                <div class="controls">
                    <form method="POST" id="dataForm">
                        <h2>API Configuration</h2>
                        <div class="form-row">
                            <div class="input-group lg">
                                <label for="client_id">Client ID:</label>
                                <input type="text" id="client_id" name="client_id" value="{{ input_values['client_id'] }}" required>
                            </div>
                            <div class="input-group lg">
                                <label for="secret_key">Secret Key:</label>
                                <input type="text" id="secret_key" name="secret_key" value="{{ input_values['secret_key'] }}" required>
                            </div>
                            <div class="input-group lg">
                                <label for="redirect_uri">Redirect URI:</label>
                                <input type="text" id="redirect_uri" name="redirect_uri" value="{{ input_values['redirect_uri'] }}" required>
                            </div>
                        </div>

                        <h2>Price Comparison Data Request</h2>
                        <div class="form-row">
                            <div class="input-group lg">
                                <label for="token">Access Token:</label>
                                <input type="text" id="token" name="token" value="{{ input_values['token'] }}" required>
                            </div>
                            <div class="input-group">
                                <label for="symbol1">Symbol 1:</label>
                                <input type="text" id="symbol1" name="symbol1" value="{{ input_values['symbol1'] }}" required>
                            </div>
                            <div class="input-group">
                                <label for="symbol2">Symbol 2:</label>
                                <input type="text" id="symbol2" name="symbol2" value="{{ input_values['symbol2'] }}" required>
                            </div>
                        </div>

                        <div class="form-row">
                             <div class="input-group">
                                <label for="days">Data Days:</label>
                                <input type="number" id="days" name="days" value="{{ input_values['days'] }}" min="1" required>
                            </div>
                            <div class="input-group">
                                <label for="resolution">Resolution (Chart Bars):</label>
                                <select id="resolution" name="resolution">
                                    <option value="1 min" {% if input_values['resolution'] == '1 min' %}selected{% endif %}>1 min</option>
                                    <option value="3 mins" {% if input_values['resolution'] == '3 mins' %}selected{% endif %}>3 mins</option>
                                    <option value="5 mins" {% if input_values['resolution'] == '5 mins' %}selected{% endif %}>5 mins</option>
                                    <option value="15 mins" {% if input_values['resolution'] == '15 mins' %}selected{% endif %}>15 mins</option>
                                    <option value="30 mins" {% if input_values['resolution'] == '30 mins' %}selected{% endif %}>30 mins</option>
                                    <option value="1 hour" {% if input_values['resolution'] == '1 hour' %}selected{% endif %}>1 hour</option>
                                    <option value="2 hours" {% if input_values['resolution'] == '2 hours' %}selected{% endif %}>2 hours</option>
                                    <option value="4 hours" {% if input_values['resolution'] == '4 hours' %}selected{% endif %}>4 hours</option>
                                    <option value="1 day" {% if input_values['resolution'] == '1 day' %}selected{% endif %}>1 day</option>
                                </select>
                            </div>
                             <div class="input-group">
                                <label for="refresh_interval">Refresh Interval (Secs):</label>
                                <input type="number" id="refresh_interval" name="refresh_interval" value="{{ input_values['refresh_interval'] }}" min="5" required>
                            </div>
                        </div>

                        <h2>Options Data Request</h2>
                        <div class="form-row">
                             <div class="input-group">
                                <label for="index_name">Index Name:</label>
                                <input type="text" id="index_name" name="index_name" value="{{ input_values['index_name'] }}" required>
                            </div>
                             <div class="input-group">
                                <label for="selected_expiry">Expiry Date:</label>
                                <select id="selected_expiry" name="selected_expiry">
                                    {% for exp in expiry_data %}
                                        <option value="{{ exp['expiry'] }}" 
                                                {% if input_values['selected_expiry'] == exp['expiry'] %}selected{% endif %}>
                                            {{ exp['date'] }}
                                        </option>
                                    {% endfor %}
                                </select>
                            </div>
                            <button type="submit">Submit & Plot</button>
                        </div>

                    </form>
                </div>
                
                {% if plot_data or plotly_plot_data %}
                
                <div class="market-data-snapshot">
                    <h3 style="color: #FFD700; margin-top: 0;">🌐 Key Market Data Snapshot</h3>
                    <div class="snapshot-row">
                        <p><strong>India VIX (LTP):</strong> <span style="font-size: 1.2em; color: #FFA500;">{{ indiavix_data.ltp }}</span></p>
                        <p><strong>India VIX (% Ch):</strong> <span style="font-size: 1.2em; color: {% if indiavix_data.ltpchp|float > 0 %}#00C853{% else %}#FF5255{% endif %};">{{ indiavix_data.ltpchp }}%</span></p>
                    </div>
                    <hr style="border: 0; border-top: 1px solid #333; margin: 10px 0;">
                    <div class="snapshot-row">
                        <p><strong>{{ input_values['index_name'] }} (LTP):</strong> <span style="font-size: 1.2em; color: #00C853;">{{ first_option_ltp }}</span></p>
                        <p><strong>{{ input_values['index_name'] }} (LTP Ch):</strong> <span style="font-size: 1.2em; color: {% if first_option_ltpch|float > 0 %}#00C853{% else %}#FF5255{% endif %};">{{ first_option_ltpch }}</span></p>
                        <p><strong>{{ input_values['index_name'] }} (Fair Price):</strong> <span style="font-size: 1.2em; color: #90CAF9;">{{ first_option_fp }}</span></p>
                        <p><strong>{{ input_values['index_name'] }} (Fair Price Ch):</strong> <span style="font-size: 1.2em; color: {% if first_option_fpch|float > 0 %}#00C853{% else %}#FF5255{% endif %};">{{ first_option_fpch }}</span></p>
                    </div>
                    <div style="font-size: 0.9em; margin-top: 10px; color: #a0a0a0;">
                        Full IndiaVIX Data: <code>{{ indiavix_data }}</code>
                    </div>
                </div>

                <div class="data-snapshot">
                    <h3 style="color: #00B0FF; margin-top: 0;">📊 Comparison Data Snapshot</h3>
                    <div class="snapshot-row">
                        <p><strong>{{ input_values['symbol1'] }} (Last Close):</strong> <span style="font-size: 1.2em; color: #00C853;">{{ latest_price_1 }}</span></p>
                        <p><strong>{{ input_values['symbol2'] }} (Last Close):</strong> <span style="font-size: 1.2em; color: #FF5255;">{{ latest_price_2 }}</span></p>
                    </div>
                    <div class="snapshot-row">
                        <p><strong>Total Call OI:</strong> <span style="font-size: 1.2em; color: #FF5255;">{{ "{:,}".format(total_call_oi) if total_call_oi != 'N/A' else 'N/A' }}</span></p>
                        <p><strong>Total Put OI:</strong> <span style="font-size: 1.2em; color: #00C853;">{{ "{:,}".format(total_put_oi) if total_put_oi != 'N/A' else 'N/A' }}</span></p>
                    </div>
                </div>

                {% if cross_alert == 'Cross Up' %}
                <div class="alert-box alert-up">
                    ⬆️ CROSS UP ALERT! {{ input_values['symbol1'] }} has crossed **ABOVE** {{ input_values['symbol2'] }}! 🚀
                </div>
                {% elif cross_alert == 'Cross Down' %}
                <div class="alert-box alert-down">
                    ⬇️ CROSS DOWN ALERT! {{ input_values['symbol1'] }} has crossed **BELOW** {{ input_values['symbol2'] }}! 📉
                </div>
                {% endif %}

                {% if plot_data %}
               <div class="chart-container">
                    <h2>Price Comparison Chart (Matplotlib)</h2>
                    <p>Last Updated: {{ now }}. Refreshing every {{ input_values['refresh_interval'] }} seconds. Chart DPI: {{ get_chart_dpi(input_values['resolution']) }}.</p>
                    <img src="data:image/png;base64,{{ plot_data }}" alt="Price Comparison Chart">
                </div>
                {% endif %}
                

                {% if plotly_plot_data %}
                <div class="chart-container">
                    <h2>Interactive Price Comparison Chart (Plotly)</h2>
                    <h2>Price Comparison Chart (Matplotlib)</h2>
                    <p>Last Updated: {{ now }}. Refreshing every {{ input_values['refresh_interval'] }} seconds. Chart DPI: {{ get_chart_dpi(input_values['resolution']) }}.</p>

                    <div id="plotly-chart">
                        {{ plotly_plot_data | safe }}
                    </div>
                </div>
                {% endif %}
                
                
                
                {% if oi_plot_data %}
                <div class="chart-container">
                    <h2>Options Open Interest (OI) Bar Chart</h2>
                    <img src="data:image/png;base64,{{ oi_plot_data }}" alt="Open Interest Bar Chart">
                </div>
                {% endif %}
                
                {% elif request.method == 'POST' %}
                <div class="chart-container" style="color: #FF5255;">
                    <p>Error: Could not generate chart. Please check the inputs or the data source (Dummy data used here).</p>
                </div>
                {% else %}
                <div class="chart-container">
                    <p>Enter parameters above and click 'Submit & Plot' to view the comparison chart.</p>
                </div>
                {% endif %}
            </div>

            <script>
                const refreshIntervalMs = {{ refresh_interval_ms }};
                const dataForm = document.getElementById('dataForm');
                
                if (refreshIntervalMs > 0) {
                    function autoRefresh() {
                        dataForm.submit();
                    }

                    // Delay the first auto-refresh to prevent immediate double-post
                    setTimeout(function() {
                        setInterval(autoRefresh, refreshIntervalMs);
                    }, refreshIntervalMs);
                }
            </script>
          </body>
        </html>
    '''
    return render_template_string(
        template_html,
        plot_data=plot_data,
        oi_plot_data=oi_plot_data,
        plotly_plot_data=plotly_plot_data,
        input_values=input_values,
        refresh_interval_ms=refresh_interval_ms,
        get_chart_dpi=get_chart_dpi,
        cross_alert=cross_alert,
        expiry_data=expiry_data,
        latest_price_1=latest_price_1,
        latest_price_2=latest_price_2,
        total_call_oi=total_call_oi,
        total_put_oi=total_put_oi,
        indiavix_data=indiavix_data,
        first_option_fp=first_option_fp,
        first_option_fpch=first_option_fpch,
        first_option_ltp=first_option_ltp,    # Added to template context
        first_option_ltpch=first_option_ltpch, # Added to template context
        now=datetime.datetime.now().strftime('%H:%M:%S')
    )

if __name__ == '__main__':
    app.run(debug=True)
